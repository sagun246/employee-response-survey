{"version":3,"sources":["App.js","index.js"],"names":["config","width","height","floating","otherFontTheme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","BotMessage","props","previousStep","triggerNextStep","apiResponse","setApiResponse","useState","useEffect","trigger","id","fetch","then","response","console","log","answer","Math","random","catch","err","_jsx","children","App","steps","message","user","input","component","asMessage","waitAction","files","setFiles","loading","setLoading","upload","url","method","body","error","_jsxs","_Fragment","CircleSpinnerOverlay","overlayColor","color","className","Dropzone","onChange","incommingFiles","value","accept","behaviour","footer","map","file","FileMosaic","preview","onClick","uploadDocument","length","alert","uploadQuestionary","disabled","ThemeProvider","theme","ChatBot","recognitionEnable","headerTitle","ReactDOM","render","document","getElementById"],"mappings":"+OASA,MAAMA,EAAS,CACbC,MAAO,QACPC,OAAQ,QACRC,UAAU,GAENC,EAAiB,CACrBC,WAAY,UACZC,WAAY,iBACZC,cAAe,UACfC,gBAAiB,OACjBC,eAAgB,OAChBC,eAAgB,UAChBC,aAAc,OACdC,gBAAiB,OACjBC,cAAe,WAiIjB,MAAMC,EAAcC,IAClB,MAAM,aAACC,EAAY,gBAAEC,GAAmBF,GACjCG,EAAaC,GAAkBC,qBAatC,OAXAC,qBAAU,KACRJ,EAAgB,CAAEK,QAASN,EAAaO,KACxCC,MAAM,eAAeC,MAAKC,IACxBC,QAAQC,IAAIF,GACTA,EAASG,QACVV,EAAeO,EAASG,QAE1BV,EAAeW,KAAKC,SAAS,IAC5BC,OAAMC,GAAON,QAAQC,IAAIK,IAAK,GACjC,CAACjB,EAAaO,GAAGN,IAEZiB,cAAA,OAAAC,SAAMjB,GAAkB,EAGlBkB,MA9If,WAEE,MAAOC,GAASjB,mBAAS,CACvB,CACEG,GAAI,cACJe,QAAS,wCACThB,QAAS,aAEX,CACEC,GAAI,YACJgB,MAAM,EACNjB,QAAUkB,IACRb,QAAQC,IAAIY,GACL,gBAGX,CACEjB,GAAI,cACJkB,UAAWP,cAACpB,EAAU,IACtB4B,WAAW,EACXC,YAAY,MAITC,EAAOC,GAAYzB,mBAAS,KAC5B0B,EAASC,GAAc3B,oBAAS,GAejC4B,EAAUC,IACdzB,MAAMyB,EAAK,CACPC,OAAQ,OACRC,KAAMP,EAAM,KACbnB,MAAKC,IACNqB,GAAW,GACXpB,QAAQC,IAAIF,EAAS,IAErBM,OAAMoB,IACNL,GAAW,GACXpB,QAAQC,IAAIwB,EAAM,GAClB,EAWJ,OACEC,eAAAC,WAAA,CAAAnB,SAAA,CACAD,cAACqB,IAAoB,CAClBT,QAASA,EACTU,aAAa,sBACbC,MAAM,YAETJ,eAAA,OAAKK,UAAU,cAAavB,SAAA,CAC1BD,cAAA,OAAKX,GAAG,OAAMY,SAAC,+BAIbD,cAAA,OAAKX,GAAG,SAER8B,eAAA,OAAK9B,GAAG,OAAMY,SAAA,CACVD,cAAA,OAAKX,GAAG,OAAMY,SACZkB,eAAA,KAAAlB,SAAA,CAAG,mMAKDD,cAAA,SAAM,k0CAOVmB,eAAA,OAAK9B,GAAG,OAAMY,SAAA,CACZD,cAACyB,IAAQ,CACPC,SAjEOC,IACnBhB,EAASgB,EAAe,EAiEZC,MAAOlB,EACPmB,OAAO,cACPC,UAAU,UACVC,QAAQ,EAAM9B,SAEbS,EAAMsB,KAAKC,GACVjC,cAACkC,IAAU,IAAKD,EAAME,SAAO,QAGjChB,eAAA,OAAAlB,SAAA,CACED,cAAA,UAAQwB,UAAU,SAASY,QAxElBC,KACjB3B,EAAM4B,QAGRzB,GAAW,GACXC,EAAO,oBAHPyB,MAAM,8BAIR,EAkE+DtC,SAAC,uBACpDD,cAAA,UAAQwB,UAAU,SAASY,QAlDfI,KACpB9B,EAAM4B,OAGRxB,EAAO,qBAFPyB,MAAM,8BAGR,EA6CkEtC,SAAC,0BACvDD,cAAA,UAAQwB,UAAU,kBAAkBiB,UAAU,EAAKxC,SAAC,gCAM9DD,cAAC0C,gBAAa,CAACC,MAAOzE,EAAe+B,SACnCD,cAAC4C,IAAO,CACNzC,MAAOA,EACP0C,mBAAmB,EACnBC,YAAY,gBACZL,UAAU,KACN3E,QAKd,ECjJAiF,IAASC,OACLhD,cAACE,EAAG,IACN+C,SAASC,eAAe,Q","file":"static/js/main.bc604e83.chunk.js","sourcesContent":["import './App.css';\nimport React,{ useEffect, useState } from 'react';\nimport { Dropzone, FileMosaic } from \"@dropzone-ui/react\";\nimport { ThemeProvider } from 'styled-components';\nimport { CircleSpinnerOverlay, FerrisWheelSpinner } from 'react-spinner-overlay'\n\n\nimport ChatBot from 'react-simple-chatbot';\n\nconst config = {\n  width: \"350px\",\n  height: \"500px\",\n  floating: true\n}\nconst otherFontTheme = {\n  background: '#f5f8fb',\n  fontFamily: 'Helvetica Neue',\n  headerBgColor: '#1e63ab',\n  headerFontColor: '#fff',\n  headerFontSize: '16px',\n  botBubbleColor: '#1e63ab',\n  botFontColor: '#fff',\n  userBubbleColor: '#fff',\n  userFontColor: '#4a4a4a'\n};\n\n\n\nfunction App() {\n  \n  const [steps] = useState([\n    {\n      id: \"initialStep\",\n      message: \"Hello dear, how can I help you today?\",\n      trigger: 'userInput'\n    },\n    {\n      id: \"userInput\",\n      user: true,\n      trigger: (input) =>{\n        console.log(input);\n        return 'botResponse'\n      }\n    },\n    {\n      id: \"botResponse\",\n      component: <BotMessage />,\n      asMessage: true,\n      waitAction: true,\n    },\n  ]);\n\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const updateFiles = (incommingFiles) => {\n    setFiles(incommingFiles);\n  };\n\n  const uploadDocument = () => {\n    if(!files.length){\n      alert(\"pleas select file to upload\");\n    } else {\n      setLoading(true);\n      upload(\"/uploadDocument\")\n    }\n  };\n\n  const upload = (url) => {\n    fetch(url, {\n        method: 'POST',\n        body: files[0] \n    }).then(response => { \n      setLoading(false);\n      console.log(response) \n    }\n    ).catch(error => {\n      setLoading(false);\n      console.log(error);\n    });\n  }\n\n  const uploadQuestionary = () => {\n    if(!files.length){\n      alert(\"pleas select file to upload\");\n    }else {\n      upload(\"/uploadQuestonary\");\n    }\n  }\n\n  return (\n    <>\n    <CircleSpinnerOverlay\n       loading={loading} \n       overlayColor=\"rgba(0,153,255,0.2)\"\n       color=\"#1e63ab\"\n    />\n    <div className=\"box-wrapper\">\n      <div id=\"box1\">\n            Survey Response Automation\n        </div>\n \n        <div id=\"box2\">\n        </div>\n        <div id=\"box3\">\n            <div id=\"box4\">\n              <p>\n                This is a minimal package for doing question and answering \n                from PDFs or text files.\n                It strives to give very good answers, \n                with no hallucinations, by grounding responses with in-text citations.\n                <br />\n                Question: How can carbon nanotubes be manufactured at a large scale?\n\n                Carbon nanotubes can be manufactured at a large scale using the electric-arc technique (Journet6644). This technique involves creating an arc between two electrodes in a reactor under a helium atmosphere and using a mixture of a metallic catalyst and graphite powder in the anode. Yields of 80% of entangled carbon filaments can be achieved, which consist of smaller aligned SWNTs self-organized into bundle-like crystallites (Journet6644). Additionally, carbon nanotubes can be synthesized and self-assembled using various methods such as DNA-mediated self-assembly, nanoparticle-assisted alignment, chemical self-assembly, and electro-addressed functionalization (Tulevski2007). These methods have been used to fabricate large-area nanostructured arrays, high-density integration, and freestanding networks (Tulevski2007). 98% semiconducting CNT network solution can also be used and is separated from metallic nanotubes using a density gradient ultracentrifugation approach (Chen2014). The substrate is incubated in the solution and then rinsed with deionized water and dried with N2 air gun, leaving a uniform carbon network (Chen2014).\n                Carbon nanotubes can be manufactured at a large scale using the electric-arc technique (Journet6644). This technique involves cr\n            </p>\n            </div>\n            <div id=\"box5\">\n              <Dropzone \n                onChange={updateFiles}\n                value={files} \n                accept=\".pdf, .xlsx\"\n                behaviour=\"replace\"\n                footer={false}\n                >\n                {files.map((file) => (\n                  <FileMosaic {...file} preview />\n                ))}\n              </Dropzone>\n              <div>\n                <button className=\"upload\" onClick={uploadDocument}>Upload As Document</button>\n                <button className=\"upload\" onClick={uploadQuestionary}>Upload As Questionary</button>\n                <button className=\"upload download\" disabled={true}>Download Report</button>\n              </div>\n            </div>\n        </div>\n     \n      </div>\n      <ThemeProvider theme={otherFontTheme}>\n        <ChatBot \n          steps={steps}\n          recognitionEnable={true}\n          headerTitle=\"Deadliner Bot\"\n          disabled={false}\n          {...config}\n        />\n      </ThemeProvider>\n    </>\n  );\n}\n\nconst BotMessage = (props) => {\n  const {previousStep, triggerNextStep} = props;\n  const [apiResponse, setApiResponse] = useState();\n\n  useEffect(() => {\n    triggerNextStep({ trigger: previousStep.id});\n    fetch('/botRequset').then(response =>{\n      console.log(response);\n      if(response.answer) {\n        setApiResponse(response.answer);\n      }\n      setApiResponse(Math.random());\n    }).catch(err => console.log(err));\n  },[previousStep.id,triggerNextStep]);\n\n  return <div>{apiResponse}</div>\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}